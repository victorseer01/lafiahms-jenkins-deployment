services:
  gateway:
    image: thevo/lafia-openmrs-gateway:dev
    platform: linux/amd64
    restart: "unless-stopped"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_started
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "${HTTP_PORT:-80}:80"
    environment:
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
      - PROXY_READ_TIMEOUT=300
      - PROXY_CONNECT_TIMEOUT=300
      - PROXY_ADD_CORS_HEADERS=true
      - CORS_ALLOW_ORIGIN=*
      - CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOW_HEADERS=Authorization,Content-Type,X-Requested-With,X-XSRF-TOKEN
      - CORS_ALLOW_CREDENTIALS=true

  frontend:
    image: thevo/lafia-openmrs-frontend:dev
    platform: linux/amd64
    restart: "unless-stopped"
    environment:
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
      - SPA_PATH=/openmrs/spa
      - API_URL=/openmrs
      - PUBLIC_URL=/openmrs/spa
      - SPA_CONFIG_URLS=/openmrs/spa/config-core_demo.json
      - SPA_DEFAULT_LOCALE=
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 5s
      interval: 10s
      retries: 3
      start_period: 20s
    depends_on:
      - backend

  backend:
    image: ${ECR_REPOSITORY:-571600871041.dkr.ecr.eu-west-2.amazonaws.com}/lafiaopenmrs-core-backend:latest
    platform: linux/amd64
    restart: "unless-stopped"
    environment:
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=8080
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
      - OMRS_CONFIG_MODULE_WEB_ADMIN=true
      - OMRS_CONFIG_AUTO_UPDATE_DATABASE=true
      - OMRS_CONFIG_CREATE_TABLES=true
      - OMRS_CONFIG_CONNECTION_SERVER=${HMS_DEV_DB_HOST}
      - OMRS_CONFIG_CONNECTION_DATABASE=${HMS_DEV_DB_NAME}
      - OMRS_CONFIG_CONNECTION_USERNAME=${HMS_DEV_DB_USER}
      - OMRS_CONFIG_CONNECTION_PASSWORD=${HMS_DEV_DB_PASSWORD}
      - OMRS_CONFIG_CONNECTION_PORT=5432
      - OMRS_DB_DRIVER_CLASS=org.postgresql.Driver
      - OMRS_CONFIG_CONNECTION_URL=jdbc:postgresql://${HMS_DEV_DB_HOST}/${HMS_DEV_DB_NAME}
      - CORS_ALLOWED_ORIGINS=*
      - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Authorization,Content-Type,X-Requested-With,X-XSRF-TOKEN,Cache-Control,Access-Control-Allow-Headers
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_MAX_AGE=3600
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/openmrs || exit 0"]
      timeout: 10s
      interval: 30s
      retries: 5
      start_period: 60s
    volumes:
      - openmrs-data:/openmrs/data

volumes:
  openmrs-data: ~